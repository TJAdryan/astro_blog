---
// Import the global.css file here so that it is included on
// all pages through the use of the <BaseHead /> component.
import '../styles/global.css';
import type { ImageMetadata } from 'astro';
import FallbackImage from '../assets/blog-placeholder-1.jpg';
import { SITE_TITLE } from '../consts';

interface Props {
	title: string;
	description: string;
	image?: ImageMetadata;
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site);

const { title, description, image = FallbackImage } = Astro.props;
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
<link rel="sitemap" href="/sitemap-index.xml" />
<link
	rel="alternate"
	type="application/rss+xml"
	title={SITE_TITLE}
	href={new URL('rss.xml', Astro.site)}
/>
<meta name="generator" content={Astro.generator} />

<!-- Font preloads -->
<link rel="preload" href="/fonts/atkinson-regular.woff" as="font" type="font/woff" crossorigin />
<link rel="preload" href="/fonts/atkinson-bold.woff" as="font" type="font/woff" crossorigin />

<!-- Canonical URL -->
<link rel="canonical" href={canonicalURL} />

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content="website" />
<meta property="og:url" content={Astro.url} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={new URL(image.src, Astro.url)} />

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={Astro.url} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={new URL(image.src, Astro.url)} />

<!-- Mermaid -->
<script src="https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.min.js"></script>
<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Initialize Mermaid
    mermaid.initialize({
      startOnLoad: false,
      theme: 'default',
      securityLevel: 'loose',
      flowchart: {
        htmlLabels: true,
        curve: 'basis'
      }
    });

    // Function to render Mermaid diagrams
    async function renderMermaidDiagrams() {
      console.log('Rendering mermaid diagrams...');
      const mermaidElements = document.querySelectorAll('.mermaid');
      console.log(`Found ${mermaidElements.length} mermaid elements`);
      
      for (let i = 0; i < mermaidElements.length; i++) {
        const element = mermaidElements[i];
        if (!element.dataset.processed) {
          console.log(`Processing mermaid element ${i}:`, element.textContent.trim().substring(0, 50));
          element.dataset.processed = 'true';
          const id = `mermaid-${Date.now()}-${i}`;
          
          try {
            const { svg } = await mermaid.render(id, element.textContent.trim());
            element.innerHTML = svg;
            console.log(`Successfully rendered mermaid diagram ${i}`);
          } catch (error) {
            console.error('Mermaid rendering error:', error);
            element.innerHTML = `<p style="color: red;">Error rendering diagram: ${error.message}</p>`;
          }
        }
      }
    }

    // Render diagrams
    renderMermaidDiagrams();
    
    // Also run when navigating in SPA mode
    window.addEventListener('astro:page-load', renderMermaidDiagrams);
  });
</script>
